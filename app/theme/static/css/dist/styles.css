/*! tailwindcss v4.1.12 | MIT License | https://tailwindcss.com */
@layer properties;
@layer theme, base, components, utilities;
@layer theme {
  :root, :host {
    --font-sans: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji",
      "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono",
      "Courier New", monospace;
    --color-gray-200: oklch(92.8% 0.006 264.531);
    --color-black: #000;
    --color-white: #fff;
    --spacing: 0.25rem;
    --container-md: 28rem;
    --text-xs: 0.75rem;
    --text-xs--line-height: calc(1 / 0.75);
    --text-sm: 0.875rem;
    --text-sm--line-height: calc(1.25 / 0.875);
    --text-base: 1rem;
    --text-base--line-height: calc(1.5 / 1);
    --text-lg: 1.125rem;
    --text-lg--line-height: calc(1.75 / 1.125);
    --text-xl: 1.25rem;
    --text-xl--line-height: calc(1.75 / 1.25);
    --text-2xl: 1.5rem;
    --text-2xl--line-height: calc(2 / 1.5);
    --text-5xl: 3rem;
    --text-5xl--line-height: 1;
    --font-weight-normal: 400;
    --font-weight-medium: 500;
    --font-weight-semibold: 600;
    --radius-xs: 0.125rem;
    --radius-md: 0.375rem;
    --radius-lg: 0.5rem;
    --radius-2xl: 1rem;
    --ease-out: cubic-bezier(0, 0, 0.2, 1);
    --ease-in-out: cubic-bezier(0.4, 0, 0.2, 1);
    --default-transition-duration: 150ms;
    --default-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    --default-font-family: var(--font-sans);
    --default-mono-font-family: var(--font-mono);
  }
}
@layer base {
  *, ::after, ::before, ::backdrop, ::file-selector-button {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    border: 0 solid;
  }
  html, :host {
    line-height: 1.5;
    -webkit-text-size-adjust: 100%;
    tab-size: 4;
    font-family: var(--default-font-family, ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji");
    font-feature-settings: var(--default-font-feature-settings, normal);
    font-variation-settings: var(--default-font-variation-settings, normal);
    -webkit-tap-highlight-color: transparent;
  }
  hr {
    height: 0;
    color: inherit;
    border-top-width: 1px;
  }
  abbr:where([title]) {
    -webkit-text-decoration: underline dotted;
    text-decoration: underline dotted;
  }
  h1, h2, h3, h4, h5, h6 {
    font-size: inherit;
    font-weight: inherit;
  }
  a {
    color: inherit;
    -webkit-text-decoration: inherit;
    text-decoration: inherit;
  }
  b, strong {
    font-weight: bolder;
  }
  code, kbd, samp, pre {
    font-family: var(--default-mono-font-family, ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace);
    font-feature-settings: var(--default-mono-font-feature-settings, normal);
    font-variation-settings: var(--default-mono-font-variation-settings, normal);
    font-size: 1em;
  }
  small {
    font-size: 80%;
  }
  sub, sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
  }
  sub {
    bottom: -0.25em;
  }
  sup {
    top: -0.5em;
  }
  table {
    text-indent: 0;
    border-color: inherit;
    border-collapse: collapse;
  }
  :-moz-focusring {
    outline: auto;
  }
  progress {
    vertical-align: baseline;
  }
  summary {
    display: list-item;
  }
  ol, ul, menu {
    list-style: none;
  }
  img, svg, video, canvas, audio, iframe, embed, object {
    display: block;
    vertical-align: middle;
  }
  img, video {
    max-width: 100%;
    height: auto;
  }
  button, input, select, optgroup, textarea, ::file-selector-button {
    font: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    letter-spacing: inherit;
    color: inherit;
    border-radius: 0;
    background-color: transparent;
    opacity: 1;
  }
  :where(select:is([multiple], [size])) optgroup {
    font-weight: bolder;
  }
  :where(select:is([multiple], [size])) optgroup option {
    padding-inline-start: 20px;
  }
  ::file-selector-button {
    margin-inline-end: 4px;
  }
  ::placeholder {
    opacity: 1;
  }
  @supports (not (-webkit-appearance: -apple-pay-button))  or (contain-intrinsic-size: 1px) {
    ::placeholder {
      color: currentcolor;
    }
    @supports (color: color-mix(in lab, red, red)) {
      ::placeholder {
        color: color-mix(in oklab, currentcolor 50%, transparent);
      }
    }
  }
  textarea {
    resize: vertical;
  }
  ::-webkit-search-decoration {
    -webkit-appearance: none;
  }
  ::-webkit-date-and-time-value {
    min-height: 1lh;
    text-align: inherit;
  }
  ::-webkit-datetime-edit {
    display: inline-flex;
  }
  ::-webkit-datetime-edit-fields-wrapper {
    padding: 0;
  }
  ::-webkit-datetime-edit, ::-webkit-datetime-edit-year-field, ::-webkit-datetime-edit-month-field, ::-webkit-datetime-edit-day-field, ::-webkit-datetime-edit-hour-field, ::-webkit-datetime-edit-minute-field, ::-webkit-datetime-edit-second-field, ::-webkit-datetime-edit-millisecond-field, ::-webkit-datetime-edit-meridiem-field {
    padding-block: 0;
  }
  ::-webkit-calendar-picker-indicator {
    line-height: 1;
  }
  :-moz-ui-invalid {
    box-shadow: none;
  }
  button, input:where([type="button"], [type="reset"], [type="submit"]), ::file-selector-button {
    appearance: button;
  }
  ::-webkit-inner-spin-button, ::-webkit-outer-spin-button {
    height: auto;
  }
  [hidden]:where(:not([hidden="until-found"])) {
    display: none !important;
  }
}
@layer utilities {
  .carousel-prev {
    position: absolute;
    inset-block: calc(0.25rem * 0);
    margin-block: auto;
    display: inline-flex;
    height: max-content;
    cursor: pointer;
    align-items: center;
    justify-content: center;
  }
  .carousel-prev.disabled {
    pointer-events: none;
  }
  .carousel-prev {
    border-start-start-radius: var(--radius-2xl);
    border-end-start-radius: var(--radius-2xl);
  }
  .carousel-next {
    position: absolute;
    inset-block: calc(0.25rem * 0);
    margin-block: auto;
    display: inline-flex;
    height: max-content;
    cursor: pointer;
    align-items: center;
    justify-content: center;
  }
  .carousel-next.disabled {
    pointer-events: none;
  }
  .carousel-next {
    border-start-end-radius: var(--radius-2xl);
    border-end-end-radius: var(--radius-2xl);
  }
  .menu {
    display: flex;
    flex-direction: column;
    flex-wrap: wrap;
    gap: calc(0.25rem * 0.5);
    border-radius: var(--radius-box);
    padding: calc(0.25rem * 2);
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    --menu-active-fg: var(--color-primary);
    --menu-active-bg: var(--color-primary);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .menu {
      --menu-active-bg: color-mix(in oklab, var(--color-primary) 10%, #0000);
    }
  }
  .menu {
    --menu-hover-fg: var(--color-base-content);
    --menu-hover-bg: var(--color-neutral);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .menu {
      --menu-hover-bg: color-mix(in oklab, var(--color-neutral) 10%, #0000);
    }
  }
  .menu :where(li ul) {
    position: relative;
    white-space: nowrap;
  }
  .menu :where(li:not(.dropdown) ul) {
    margin-inline-start: calc(0.25rem * 4);
    padding-inline-start: calc(0.25rem * 2);
  }
  .menu :where(li:not(.dropdown) ul):before {
    position: absolute;
    inset-inline-start: calc(0.25rem * 0);
    top: calc(0.25rem * 3);
    bottom: calc(0.25rem * 2.5);
    background-color: var(--color-base-content);
    opacity: 10%;
    width: var(--border);
    content: "";
  }
  .menu :where(li > .menu-dropdown:not(.menu-dropdown-show)) {
    display: none;
  }
  .menu :where(.menu li:empty) {
    background-color: var(--color-base-content);
    opacity: 10%;
    margin: 0.5rem 1rem;
    height: 1px;
  }
  .menu :where(li:not(.menu-title, .tooltip) > *:not(ul, .collapse, .accordion-content, .menu-title, .btn)) {
    border-radius: var(--radius-field);
    padding-inline: calc(0.25rem * 4);
    padding-block: calc(0.25rem * 2.5);
    text-align: start;
    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-timing-function: var(--ease-out);
    transition-duration: var(--tw-duration, var(--default-transition-duration));
    transition-duration: 200ms;
    --tw-duration: 200ms;
    --tw-ease: var(--ease-out);
    text-wrap: balance;
  }
  .menu :where(li:not(.menu-title) > *:not(ul, .collapse, .accordion-content, .menu-title, .btn)) {
    display: grid;
    grid-auto-flow: column;
    align-content: flex-start;
    align-items: center;
    gap: calc(0.25rem * 2);
    grid-auto-columns: minmax(auto, max-content) auto max-content;
    user-select: none;
  }
  .menu :where(li.tooltip) > * {
    border-radius: var(--radius-field);
    padding-inline: calc(0.25rem * 4);
    padding-block: calc(0.25rem * 2.5);
    text-align: start;
  }
  .menu :where(.menu li:not(.menu-title, .menu-disabled)) {
    color: var(--color-base-content);
  }
  .menu :where( .menu li:not(.menu-title, .menu-disabled) > *:not(ul, .collapse, .accordion-content, .dropdown-active, .menu-title) ):not(.btn):focus-visible {
    cursor: pointer;
    --tw-outline-style: none;
    outline-style: none;
    color: var(--menu-hover-fg);
    background-color: var(--menu-hover-bg);
  }
  .menu :where( .menu li:not(.menu-title, .menu-disabled) > *:not(ul, .collapse, .accordion-content, .dropdown-active, .menu-title) ):hover {
    cursor: pointer;
    --tw-outline-style: none;
    outline-style: none;
    color: var(--menu-hover-fg);
    background-color: var(--menu-hover-bg);
  }
  .menu li:not(.menu-title, .menu-disabled) > :not(ul, .menu-title, .collapse, .accordion-content, .btn).menu-active {
    color: var(--menu-active-fg);
    background-color: var(--menu-active-bg);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
  }
  .menu li.menu-disabled {
    pointer-events: none;
    opacity: 50%;
    webkit-user-select: none;
    user-select: none;
  }
  :where(.menu li) {
    position: relative;
    display: flex;
    flex-shrink: 0;
    flex-direction: column;
    flex-wrap: wrap;
    align-items: stretch;
  }
  :where(.menu li) .badge {
    justify-self: flex-end;
  }
  .tabs-lifted > .tab:focus-visible {
    border-end-end-radius: 0;
    border-end-start-radius: 0;
  }
  .tab {
    position: relative;
    display: inline-flex;
    cursor: pointer;
    appearance: none;
    align-items: center;
    justify-content: center;
    text-align: center;
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    color: var(--color-base-content);
    webkit-user-select: none;
    user-select: none;
    height: var(--size);
    --size: calc(var(--size-field, 0.25rem) * 9.5);
    --tab-p: 1rem;
    --tab-bg: var(--color-base-100);
    --tab-border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .tab {
      --tab-border-color: color-mix(in oklab, var(--color-base-content), #0000 90%);
    }
  }
  .tab {
    padding-inline: var(--tab-p, 1rem);
  }
  .tab:focus, .tab:focus-visible {
    --tw-outline-style: none;
    outline-style: none;
  }
  .tab[disabled] {
    pointer-events: none;
    opacity: 40%;
  }
  @media (hover: hover) {
    .tab[disabled]:hover {
      pointer-events: none;
      opacity: 40%;
    }
  }
  .tabs-bordered > .tab {
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .tabs-bordered > .tab {
      border-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
    }
  }
  @media (hover:hover) {
    @media (hover: hover) {
      .tabs-bordered > .tab:hover {
        border-color: var(--color-primary);
      }
      @supports (color: color-mix(in lab, red, red)) {
        .tabs-bordered > .tab:hover {
          border-color: color-mix(in oklab, var(--color-primary) 30%, transparent);
        }
      }
    }
  }
  @media (hover:hover) {
    @media (hover: hover) {
      .tabs-bordered > .tab:hover {
        color: var(--color-primary);
      }
    }
  }
  .tabs-bordered > .tab {
    border-style: solid;
    border-bottom-width: calc(var(--border, 1px) + 1px);
  }
  @media (hover:hover) {
    @media (hover: hover) {
      .tabs-lifted > .tab:hover {
        border-color: var(--color-primary);
      }
      @supports (color: color-mix(in lab, red, red)) {
        .tabs-lifted > .tab:hover {
          border-color: color-mix(in oklab, var(--color-primary) 30%, transparent);
        }
      }
    }
  }
  @media (hover:hover) {
    @media (hover: hover) {
      .tabs-lifted > .tab:hover {
        color: var(--color-primary);
      }
    }
  }
  .tabs-lifted > .tab {
    border: var(--tab-border, 1px) solid transparent;
    border-width: 0 0 var(--tab-border, 1px) 0;
    border-radius: var(--radius-field, 0.375rem);
    border-bottom-color: var(--tab-border-color);
    padding-inline-start: var(--tab-p, 1rem);
    padding-inline-end: var(--tab-p, 1rem);
    padding-top: var(--tab-border, 1px);
  }
  .tabs-lifted > .tab.tab-active:not([disabled]) {
    background-color: var(--tab-bg);
    border-width: var(--tab-border, 1px) var(--tab-border, 1px) 0 var(--tab-border, 1px);
    border-color: var(--tab-border-color);
    border-end-start-radius: 0;
    border-end-end-radius: 0;
    padding-inline-start: calc(var(--tab-p, 1rem) - var(--tab-border, 1px));
    padding-inline-end: calc(var(--tab-p, 1rem) - var(--tab-border, 1px));
    padding-bottom: var(--tab-border, 1px);
    padding-top: 0;
  }
  .tabs-lifted > .tab.tab-active:not([disabled]):before {
    content: "";
    display: block;
    position: absolute;
    z-index: 1;
    width: calc(100% + var(--radius-field, 0.375rem) * 2);
    height: var(--radius-field, 0.375rem);
    bottom: 0;
    background-size: var(--radius-field, 0.375rem);
    background-repeat: no-repeat;
    background-position: top left, top right;
    --tab-grad: calc(69% - var(--tab-border, 1px));
    --radius-start: radial-gradient(
    circle at top left,
    transparent var(--tab-grad),
    var(--tab-border-color) calc(var(--tab-grad) + 0.25px),
    var(--tab-border-color) calc(var(--tab-grad) + var(--tab-border, 1px)),
    var(--tab-bg) calc(var(--tab-grad) + var(--tab-border, 1px) + 0.25px)
  );
    --radius-end: radial-gradient(
    circle at top right,
    transparent var(--tab-grad),
    var(--tab-border-color) calc(var(--tab-grad) + 0.25px),
    var(--tab-border-color) calc(var(--tab-grad) + var(--tab-border, 1px)),
    var(--tab-bg) calc(var(--tab-grad) + var(--tab-border, 1px) + 0.25px)
  );
    background-image: var(--radius-start), var(--radius-end);
  }
  .tabs-lifted > .tab.tab-active:not([disabled]):first-child:before {
    background-image: var(--radius-end);
    background-position: top right;
  }
  .tabs-lifted > .tab.tab-active:not([disabled]):last-child:before {
    background-image: var(--radius-start);
    background-position: top left;
  }
  [dir="rtl"] .tabs-lifted > .tab.tab-active:not([disabled]):first-child:before {
    background-image: var(--radius-start);
    background-position: top left;
  }
  [dir="rtl"] .tabs-lifted > .tab.tab-active:not([disabled]):last-child:before {
    background-image: var(--radius-end);
    background-position: top right;
  }
  .tabs-xl :where(.tab) {
    font-size: var(--text-xl);
    line-height: var(--tw-leading, var(--text-xl--line-height));
    --size: calc(var(--size-field, 0.25rem) * 14);
    --tab-p: 1.5rem;
  }
  .tabs-lg :where(.tab) {
    font-size: var(--text-lg);
    line-height: var(--tw-leading, var(--text-lg--line-height));
    --size: calc(var(--size-field, 0.25rem) * 11.5);
    --tab-p: 1.25rem;
  }
  .tabs-md :where(.tab) {
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    --size: calc(var(--size-field, 0.25rem) * 9.5);
    --tab-p: 1rem;
  }
  .tabs-sm :where(.tab) {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
    --size: calc(var(--size-field, 0.25rem) * 7.5);
    --tab-p: 0.75rem;
  }
  .tabs-xs :where(.tab) {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
    --size: calc(var(--size-field, 0.25rem) * 6);
    --tab-p: 0.5rem;
  }
  .btn {
    display: inline-flex;
    flex-shrink: 0;
    cursor: pointer;
    flex-wrap: nowrap;
    align-items: center;
    justify-content: center;
    gap: calc(0.25rem * 2);
    text-align: center;
    vertical-align: middle;
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
    text-decoration-line: none;
    webkit-user-select: none;
    user-select: none;
  }
  @media (prefers-reduced-motion: reduce) {
    .btn {
      transition-property: none;
    }
  }
  .btn {
    padding-inline: var(--btn-p);
    color: var(--btn-fg);
    height: var(--size);
    outline-color: var(--btn-color, var(--color-neutral));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn {
      outline-color: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 30%, var(--color-base-100));
    }
  }
  .btn {
    transition-property: color, background-color, border-color, box-shadow;
    transition-timing-function: cubic-bezier(0, 0, 0.96, 1.03);
    transition-duration: 0.25s;
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    background-color: var(--btn-bg);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--btn-noise);
    border: var(--border) solid var(--btn-border);
    box-shadow: 0 0.5px 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 8%)) inset, var(--btn-shadow);
    --size: calc(var(--size-field, 0.25rem) * 9.5);
    --btn-bg: var(--btn-color, var(--color-neutral));
    --btn-fg: var(--color-neutral-content);
    --btn-p: 1rem;
    --btn-border: var(--btn-bg);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn {
      --btn-border: color-mix(in oklab, var(--btn-bg), #000 calc(var(--depth) * 5%));
    }
  }
  .btn {
    --btn-shadow: 0px 1px 3px 0px var(--color-base-300),
    0px 1px 2px -1px var(--color-base-300);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn {
      --btn-shadow: 0px 1px 3px 0px color-mix(in oklab, var(--color-base-300) 40%, #0000),
    0px 1px 2px -1px color-mix(in oklab, var(--color-base-300) 40%, #0000);
    }
  }
  .btn {
    --btn-noise: var(--fx-noise);
  }
  @media (hover: hover) {
    .btn:hover {
      --btn-bg: var(--btn-color, var(--color-neutral));
    }
    @supports (color: color-mix(in lab, red, red)) {
      .btn:hover {
        --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 90%, #000);
      }
    }
  }
  .btn:active:hover:not(.btn-active), .btn:active:focus:not(.btn-active) {
    --tw-scale-x: 95%;
    --tw-scale-y: 95%;
    --tw-scale-z: 95%;
    scale: var(--tw-scale-x) var(--tw-scale-y);
    transition-property: transform, translate, scale, rotate;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-timing-function: ease-out;
    transition-duration: var(--tw-duration, var(--default-transition-duration));
    transition-duration: 300ms;
    --tw-duration: 300ms;
  }
  .btn:focus-visible {
    --btn-bg: var(--btn-color, var(--color-neutral));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn:focus-visible {
      --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)), #000 10%);
    }
  }
  .btn:focus-visible {
    outline-width: 2px;
    outline-style: solid;
  }
  .btn:is(:disabled, [disabled], .btn-disabled) {
    pointer-events: none;
    opacity: 50%;
    --tw-shadow: 0 0 #0000;
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .btn:is(input[type="checkbox"], input[type="radio"]) {
    appearance: none;
  }
  .btn:is(input[type="checkbox"], input[type="radio"])::after {
    content: attr(aria-label);
  }
  .btn:is(input[type="checkbox"], input[type="radio"]):checked {
    background: var(--color-primary);
    color: var(--color-primary-content);
    outline-color: var(--color-primary);
    --btn-shadow: 0 0 0 0 oklch(0% 0 0/0), 0 0 0 0 oklch(0% 0 0/0);
    isolation: isolate;
  }
  .pin-input {
    border-radius: var(--radius-field);
    border-style: var(--tw-border-style);
    border-width: 1px;
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .pin-input {
      border-color: color-mix(in oklab, var(--color-base-content) 25%, transparent);
    }
  }
  .pin-input {
    background-color: var(--color-base-100);
    text-align: center;
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
  }
  .pin-input::placeholder {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .pin-input::placeholder {
      color: color-mix(in oklab, var(--color-base-content) 80%, transparent);
    }
  }
  .pin-input {
    height: var(--size);
    width: var(--size);
    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    --size: calc(var(--size-field, 0.25rem) * 9.5);
  }
  .pin-input:hover:not(:focus, :focus-within) {
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .pin-input:hover:not(:focus, :focus-within) {
      border-color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
    }
  }
  .pin-input:focus, .pin-input:focus-within {
    border-color: var(--color-primary);
    --tw-shadow: 0 1px 2px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.05));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    --tw-shadow-color: var(--color-primary);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .pin-input:focus, .pin-input:focus-within {
      --tw-shadow-color: color-mix(in oklab, var(--color-primary) 30%, #0000);
    }
  }
  .pin-input:focus, .pin-input:focus-within {
    outline: 1px solid var(--color-primary);
    isolation: isolate;
  }
  .pin-input.disabled, .pin-input:disabled, .pin-input[disabled] {
    pointer-events: none;
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .pin-input.disabled, .pin-input:disabled, .pin-input[disabled] {
      border-color: color-mix(in oklab, var(--color-base-content) 25%, transparent);
    }
  }
  .pin-input.disabled, .pin-input:disabled, .pin-input[disabled] {
    background-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .pin-input.disabled, .pin-input:disabled, .pin-input[disabled] {
      background-color: color-mix(in oklab, var(--color-base-content) 5%, transparent);
    }
  }
  .pin-input.disabled, .pin-input:disabled, .pin-input[disabled] {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .pin-input.disabled, .pin-input:disabled, .pin-input[disabled] {
      color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
  }
  .pin-input.disabled::placeholder, .pin-input:disabled::placeholder, .pin-input[disabled]::placeholder {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .pin-input.disabled::placeholder, .pin-input:disabled::placeholder, .pin-input[disabled]::placeholder {
      color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
    }
  }
  .dropdown-item {
    clear: both;
    display: flex;
    width: 100%;
    align-items: center;
    column-gap: calc(0.25rem * 2);
    border-radius: var(--radius-field);
    background-color: transparent;
    padding-inline: calc(0.25rem * 4);
    padding-block: calc(0.25rem * 2.5);
    color: var(--color-base-content);
    text-decoration-line: none;
    text-decoration-thickness: 0px;
    text-align: inherit;
  }
  .dropdown-item:hover:not(.dropdown-active), .dropdown-item:focus:not(.dropdown-active), .dropdown-item:focus-within:not(.dropdown-active), .dropdown-item:focus-visible:not(.dropdown-active) {
    background-color: var(--color-neutral);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .dropdown-item:hover:not(.dropdown-active), .dropdown-item:focus:not(.dropdown-active), .dropdown-item:focus-within:not(.dropdown-active), .dropdown-item:focus-visible:not(.dropdown-active) {
      background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
    }
  }
  .dropdown-item:hover:not(.dropdown-active), .dropdown-item:focus:not(.dropdown-active), .dropdown-item:focus-within:not(.dropdown-active), .dropdown-item:focus-visible:not(.dropdown-active) {
    --tw-outline-style: none;
    outline-style: none;
  }
  .dropdown-item.dropdown-disabled, .dropdown-item:disabled, .dropdown-item[disabled] {
    pointer-events: none;
    background-color: var(--color-neutral);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .dropdown-item.dropdown-disabled, .dropdown-item:disabled, .dropdown-item[disabled] {
      background-color: color-mix(in oklab, var(--color-neutral) 5%, transparent);
    }
  }
  .dropdown-item.dropdown-disabled, .dropdown-item:disabled, .dropdown-item[disabled] {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .dropdown-item.dropdown-disabled, .dropdown-item:disabled, .dropdown-item[disabled] {
      color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
  }
  .loading {
    pointer-events: none;
    display: inline-block;
    aspect-ratio: 1 / 1;
    background-color: currentColor;
    vertical-align: middle;
    width: calc(var(--size-selector, 0.25rem) * 6);
    mask-size: 100%;
    mask-repeat: no-repeat;
    mask-position: center;
    mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='%23000' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cstyle%3E.spinner_V8m1%7Btransform-origin:center;animation:spinner_zKoa 2s linear infinite%7D.spinner_V8m1 circle%7Bstroke-linecap:round;animation:spinner_YpZS 1.5s ease-out infinite%7D%40keyframes spinner_zKoa%7B100%25%7Btransform:rotate(360deg)%7D%7D%40keyframes spinner_YpZS%7B0%25%7Bstroke-dasharray:0 150;stroke-dashoffset:0%7D47.5%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-16%7D95%25%2C100%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-59%7D%7D%3C%2Fstyle%3E%3Cg class='spinner_V8m1'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3'%3E%3C%2Fcircle%3E%3C%2Fg%3E%3C%2Fsvg%3E");
  }
  .accordion-toggle {
    width: 100%;
    cursor: pointer;
    padding-inline: calc(0.25rem * 5);
    padding-block: calc(0.25rem * 4);
    font-size: var(--text-lg);
    line-height: var(--tw-leading, var(--text-lg--line-height));
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
    color: var(--color-base-content);
  }
  .accordion-toggle:disabled {
    pointer-events: none;
    opacity: 50%;
  }
  .range.disabled {
    pointer-events: none;
    opacity: 50%;
  }
  .carousel-prev.disabled {
    pointer-events: none;
  }
  .carousel-next.disabled {
    pointer-events: none;
  }
  .tooltip-content {
    visibility: hidden;
    position: absolute;
    display: inline-block;
    padding: calc(0.25rem * 2);
    opacity: 0%;
    transition-property: opacity;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
    width: max-content;
    z-index: 20;
  }
  .collapse {
    visibility: collapse;
  }
  .collapse:not(td):not(tr):not(colgroup) {
    visibility: visible;
  }
  .invisible {
    visibility: hidden;
  }
  .chat {
    display: grid;
    grid-template-columns: repeat(2, minmax(0, 1fr));
    column-gap: calc(0.25rem * 4);
    padding-block: calc(0.25rem * 1);
  }
  .chat .chat-avatar {
    grid-row: span 2 / span 2;
    align-self: flex-end;
  }
  .chat .chat-header {
    grid-row-start: 1;
    margin-bottom: calc(0.25rem * 1);
    font-size: var(--text-xs);
    line-height: var(--tw-leading, var(--text-xs--line-height));
  }
  .chat .chat-footer {
    grid-row-start: 3;
    margin-top: calc(0.25rem * 1);
    font-size: var(--text-xs);
    line-height: var(--tw-leading, var(--text-xs--line-height));
  }
  .chat .chat-bubble {
    position: relative;
    display: block;
    width: fit-content;
    border-radius: var(--radius-box);
    padding: calc(0.25rem * 3);
    max-width: 90%;
    min-height: 2.75rem;
    min-width: 2.75rem;
  }
  .chat .chat-bubble:before {
    position: absolute;
    bottom: calc(0.25rem * 0);
    width: calc(0.25rem * 4);
    height: calc(0.25rem * 4);
    background-color: inherit;
    content: "";
    mask-size: contain;
    mask-repeat: no-repeat;
    mask-position: center;
  }
  .chat.chat-receiver {
    place-items: start;
    grid-template-columns: auto 1fr;
  }
  .chat.chat-receiver .chat-header {
    grid-column-start: 2;
  }
  .chat.chat-receiver .chat-footer {
    grid-column-start: 2;
  }
  .chat.chat-receiver .chat-avatar {
    grid-column-start: 1;
  }
  .chat.chat-receiver .chat-bubble {
    grid-column-start: 2;
    border-end-start-radius: 0;
    background-color: var(--color-base-100);
    color: var(--color-base-content);
  }
  .chat.chat-receiver .chat-bubble:before {
    inset-inline-start: -0.749rem;
    mask-image: url("data:image/svg+xml,%3csvg width='3' height='3' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m 0 3 L 3 3 L 3 0 C 3 1 1 3 0 3'/%3e%3c/svg%3e");
  }
  [dir="rtl"] .chat.chat-receiver .chat-bubble:before {
    mask-image: url("data:image/svg+xml,%3csvg width='3' height='3' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m 0 3 L 1 3 L 3 3 C 2 3 0 1 0 0'/%3e%3c/svg%3e");
  }
  .chat.chat-sender {
    place-items: end;
    grid-template-columns: 1fr auto;
  }
  .chat.chat-sender .chat-header {
    grid-column-start: 1;
  }
  .chat.chat-sender .chat-footer {
    grid-column-start: 1;
  }
  .chat.chat-sender .chat-avatar {
    grid-column-start: 2;
  }
  .chat.chat-sender .chat-bubble {
    grid-column-start: 1;
    border-end-end-radius: 0;
    background-color: var(--color-primary);
    text-align: end;
    color: var(--color-primary-content);
  }
  .chat.chat-sender .chat-bubble:before {
    inset-inline-start: 99.9%;
    mask-image: url("data:image/svg+xml,%3csvg width='3' height='3' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m 0 3 L 1 3 L 3 3 C 2 3 0 1 0 0'/%3e%3c/svg%3e");
  }
  [dir="rtl"] .chat.chat-sender .chat-bubble:before {
    mask-image: url("data:image/svg+xml,%3csvg width='3' height='3' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m 0 3 L 3 3 L 3 0 C 3 1 1 3 0 3'/%3e%3c/svg%3e");
  }
  .table {
    position: relative;
    width: 100%;
    overflow-x: hidden;
    overflow-y: auto;
    border-radius: var(--radius-box);
    text-align: left;
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
  }
  .table:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
    text-align: right;
  }
  @media (hover: hover) {
    .table tr.row-hover:hover, .table tr.row-hover:nth-child(even):hover {
      background-color: var(--color-base-200);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .table tr.row-hover:hover, .table tr.row-hover:nth-child(even):hover {
        background-color: color-mix(in oklab, var(--color-base-200) 80%, transparent);
      }
    }
  }
  .table tr.row-active, .table tr.row-active:nth-child(even) {
    background-color: var(--color-base-200);
  }
  .table :where(th, td) {
    padding-inline: calc(0.25rem * 5);
    padding-block: calc(0.25rem * 3);
    vertical-align: middle;
    text-wrap: nowrap;
  }
  .table :where(thead, tfoot) {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
    white-space: nowrap;
    color: var(--color-base-content);
    text-transform: uppercase;
    letter-spacing: 1px;
  }
  .table :where(th) {
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
  }
  .table :where(.table-pin-rows thead tr) {
    position: sticky;
    top: calc(0.25rem * 0);
    z-index: 1;
    background-color: var(--color-base-100);
  }
  .table :where(.table-pin-rows tfoot tr) {
    position: sticky;
    bottom: calc(0.25rem * 0);
    z-index: 1;
    background-color: var(--color-base-100);
  }
  .table :where(.table-pin-cols tr th) {
    position: sticky;
    right: calc(0.25rem * 0);
    left: calc(0.25rem * 0);
    background-color: var(--color-base-100);
  }
  .table :where(thead tr) {
    border-bottom: var(--border) solid var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .table :where(thead tr) {
      border-bottom: var(--border) solid color-mix(in oklch, var(--color-base-content) 25%, #0000);
    }
  }
  .table :where(tbody tr:not(:last-child)) {
    border-bottom: var(--border) solid var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .table :where(tbody tr:not(:last-child)) {
      border-bottom: var(--border) solid color-mix(in oklch, var(--color-base-content) 10%, #0000);
    }
  }
  .table :where(tfoot) {
    border-top: var(--border) solid var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .table :where(tfoot) {
      border-top: var(--border) solid color-mix(in oklch, var(--color-base-content) 25%, #0000);
    }
  }
  .select {
    position: relative;
    display: inline-flex;
    width: 100%;
    flex-shrink: 1;
    cursor: pointer;
    appearance: none;
    background-color: var(--color-base-100);
    padding-inline-start: calc(0.25rem * 3);
    padding-inline-end: calc(0.25rem * 10);
    vertical-align: middle;
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    color: var(--color-base-content);
    webkit-user-select: none;
    user-select: none;
    height: var(--size);
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='1em' height='1em' viewBox='0 0 24 24'><path fill='none' stroke='%239293AE' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m6 9l6 6l6-6'/></svg>");
    background-size: 1.3em;
    background-position: calc(100% - 0.5rem) center;
    background-repeat: no-repeat;
    touch-action: manipulation;
    text-overflow: ellipsis;
    border: var(--border) solid #0000;
    border-color: var(--input-color);
    --input-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .select {
      --input-color: color-mix(in oklab, var(--color-base-content) 40%, #0000);
    }
  }
  .select {
    --size: calc(var(--size-field, 0.25rem) * 9.5);
  }
  .select:hover:not(:focus, :focus-within), .select:has(:hover):not(:focus, :focus-within) {
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .select:hover:not(:focus, :focus-within), .select:has(:hover):not(:focus, :focus-within) {
      border-color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
    }
  }
  [dir="rtl"] .select {
    background-position: calc(0% + 1.3em) center;
  }
  .select select {
    margin-inline-end: calc(0.25rem * -10);
    height: 100%;
    width: calc(100% + 2.75rem);
    appearance: none;
    padding-inline-start: calc(0.25rem * 3);
    padding-inline-end: calc(0.25rem * 10);
    background-color: transparent;
    border-style: none;
  }
  .select select:focus, .select select:focus-within {
    --tw-outline-style: none;
    outline-style: none;
  }
  .select[multiple] {
    background-image: none;
  }
  .select:focus, .select:focus-within {
    --tw-shadow: 0 1px 2px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.05));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    --input-color: var(--color-primary);
    --tw-shadow-color: var(--input-color);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .select:focus, .select:focus-within {
      --tw-shadow-color: color-mix(in oklab, var(--input-color) 30%, #0000);
    }
  }
  .select:focus, .select:focus-within {
    outline: 1px solid var(--input-color);
    border-color: var(--input-color);
    isolation: isolate;
  }
  .select:has(> select[disabled]), .select:is(:disabled, [disabled]) {
    cursor: not-allowed;
    border-style: var(--tw-border-style);
    border-width: 0px;
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .select:has(> select[disabled]), .select:is(:disabled, [disabled]) {
      border-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
    }
  }
  .select:has(> select[disabled]), .select:is(:disabled, [disabled]) {
    background-color: var(--color-neutral);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .select:has(> select[disabled]), .select:is(:disabled, [disabled]) {
      background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
    }
  }
  .select:has(> select[disabled]), .select:is(:disabled, [disabled]) {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .select:has(> select[disabled]), .select:is(:disabled, [disabled]) {
      color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
  }
  .select:has(> select[disabled])::placeholder, .select:is(:disabled, [disabled])::placeholder {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .select:has(> select[disabled])::placeholder, .select:is(:disabled, [disabled])::placeholder {
      color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
  }
  .select:has(> select[disabled]) > select[disabled] {
    cursor: not-allowed;
  }
  .input > .select {
    height: auto;
    border-style: var(--tw-border-style);
    border-width: 0px;
  }
  .input > .select:focus, .input > .select:focus-within {
    --tw-shadow: 0 0 #0000;
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    outline-style: var(--tw-outline-style);
    outline-width: 0px;
  }
  .select:has(> .select-floating) select::placeholder {
    color: transparent;
  }
  .select:has(> .select-floating) select:focus::placeholder {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .select:has(> .select-floating) select:focus::placeholder {
      color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
  }
  .card {
    position: relative;
    display: flex;
    flex-direction: column;
    border-radius: var(--radius-box);
    --tw-border-style: solid;
    border-style: solid;
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .card {
      border-color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }
  .card {
    background-color: var(--color-base-100);
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    --tw-font-weight: var(--font-weight-normal);
    font-weight: var(--font-weight-normal);
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .card {
      color: color-mix(in oklab, var(--color-base-content) 80%, transparent);
    }
  }
  .card {
    --tw-outline-style: none;
    outline-style: none;
    box-shadow: var( --card-shadow, 0 1px 3px 0 var(--color-base-300), 0 1px 2px -1px var(--color-base-300) );
  }
  @supports (color: color-mix(in lab, red, red)) {
    .card {
      box-shadow: var( --card-shadow, 0 1px 3px 0 color-mix(in oklab, var(--color-base-300) 20%, #0000), 0 1px 2px -1px color-mix(in oklab, var(--color-base-300) 20%, #0000) );
    }
  }
  .card {
    border-width: var(--card-border, 0px);
  }
  .card:focus {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .card:focus {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .card :where(figure:first-child) {
    overflow: hidden;
    border-start-start-radius: inherit;
    border-start-end-radius: inherit;
    border-end-start-radius: unset;
    border-end-end-radius: unset;
  }
  .card :where(figure:last-child) {
    overflow: hidden;
    border-start-start-radius: unset;
    border-start-end-radius: unset;
    border-end-start-radius: inherit;
    border-end-end-radius: inherit;
  }
  .card:where(.card-border) {
    border: var(--border) solid var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .card:where(.card-border) {
      border: var(--border) solid color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }
  .card.image-full {
    display: grid;
  }
  .card.image-full:before {
    position: relative;
    grid-column-start: 1;
    grid-row-start: 1;
    border-radius: var(--radius-box);
    background-color: var(--color-neutral);
    opacity: 75%;
    content: "";
  }
  .card.image-full > * {
    grid-column-start: 1;
    grid-row-start: 1;
  }
  .card.image-full > .card-body {
    position: relative;
    color: var(--color-neutral-content);
  }
  .card.image-full :where(figure) {
    overflow: hidden;
    border-radius: inherit;
  }
  .card.image-full > figure img {
    height: 100%;
    object-fit: cover;
  }
  .card figure {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .card:has(> input:is(input[type="checkbox"], input[type="radio"])) {
    cursor: pointer;
    user-select: none;
  }
  .card:has(> :checked) {
    outline: 2px solid currentColor;
  }
  .card .card-alert {
    border-radius: 0;
  }
  .card .card-alert:first-child {
    border-top-left-radius: var(--radius-box);
    border-top-right-radius: var(--radius-box);
  }
  .card .card-alert:last-child {
    border-bottom-right-radius: var(--radius-box);
    border-bottom-left-radius: var(--radius-box);
  }
  .swap {
    position: relative;
    display: inline-grid;
    cursor: pointer;
    place-content: center;
    vertical-align: middle;
    webkit-user-select: none;
    user-select: none;
  }
  .swap input {
    appearance: none;
    border: none;
  }
  .swap > * {
    grid-column-start: 1;
    grid-row-start: 1;
    transition-property: transform, rotate, opacity;
    transition-duration: 0.2s;
    transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
  }
  .swap .swap-on, .swap .swap-indeterminate, .swap input:indeterminate ~ .swap-on {
    opacity: 0%;
  }
  .swap input:is(:checked, :indeterminate) ~ .swap-off {
    opacity: 0%;
  }
  .swap input:checked ~ .swap-on, .swap input:indeterminate ~ .swap-indeterminate {
    opacity: 100%;
    backface-visibility: visible;
  }
  .checkbox {
    position: relative;
    flex-shrink: 0;
    cursor: pointer;
    appearance: none;
    border-radius: var(--radius-selector);
    padding: calc(0.25rem * 1);
    vertical-align: middle;
    color: var(--color-neutral-content);
    border: var(--border) solid var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .checkbox {
      border: var(--border) solid color-mix(in oklab, var(--color-base-content) 40%, #0000);
    }
  }
  .checkbox {
    --input-color: var(--color-neutral);
    box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 0 #0000 inset, 0 0 #0000;
    transition: background-color 0.2s, box-shadow 0.2s;
    --size: calc(var(--size-selector, 0.25rem) * 6);
    width: var(--size);
    height: var(--size);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
  }
  .checkbox:before {
    --tw-content: "";
    content: var(--tw-content);
    display: block;
    width: 100%;
    height: 100%;
    rotate: 45deg;
    background-color: currentColor;
    opacity: 0%;
    transition: clip-path 0.3s, opacity 0.1s, rotate 0.3s, translate 0.3s;
    transition-delay: 0.1s;
    clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 70% 80%, 70% 100%);
    box-shadow: 0px 3px 0 0px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
    font-size: 1rem;
    line-height: 0.75;
  }
  .checkbox:focus-visible {
    outline: 2px solid var(--input-color, var(--color-neutral));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .checkbox:focus-visible {
      outline: 2px solid color-mix(in oklab, var(--input-color, var(--color-neutral)) 30%, #0000);
    }
  }
  .checkbox:focus-visible {
    outline-offset: 0px;
  }
  .checkbox:checked, .checkbox[aria-checked="true"] {
    background-color: var(--input-color, #0000);
    border-color: var(--input-color, #0000);
    box-shadow: 0 0 #0000 inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px 2px 0 var(--color-base-300);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .checkbox:checked, .checkbox[aria-checked="true"] {
      box-shadow: 0 0 #0000 inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px 2px 0 color-mix(in oklab, var(--color-base-300) 20%, #0000);
    }
  }
  .checkbox:checked:before, .checkbox[aria-checked="true"]:before {
    clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 0%, 70% 0%, 70% 100%);
    opacity: 100%;
  }
  @media (forced-colors: active) {
    .checkbox:checked:before, .checkbox[aria-checked="true"]:before {
      rotate: 0deg;
      background-color: transparent;
      --tw-content: "✔︎";
      clip-path: none;
    }
  }
  @media print {
    .checkbox:checked:before, .checkbox[aria-checked="true"]:before {
      rotate: 0deg;
      background-color: transparent;
      --tw-content: "✔︎";
      clip-path: none;
    }
  }
  .checkbox:indeterminate {
    background-color: var(--color-neutral);
  }
  .checkbox:indeterminate:before {
    rotate: 0deg;
    opacity: 100%;
    translate: 0 -35%;
    clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 80% 80%, 80% 100%);
  }
  .checkbox:disabled {
    cursor: not-allowed;
    opacity: 50%;
  }
  .radio {
    position: relative;
    flex-shrink: 0;
    cursor: pointer;
    appearance: none;
    border-radius: calc(infinity * 1px);
    padding: calc(0.25rem * 1);
    vertical-align: middle;
    border: var(--border) solid var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .radio {
      border: var(--border) solid color-mix(in oklab, var(--color-base-content) 40%, #0000);
    }
  }
  .radio {
    box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset;
    --size: calc(var(--size-selector, 0.25rem) * 6);
    width: var(--size);
    height: var(--size);
    color: var(--input-color, var(--color-neutral));
  }
  .radio:before {
    display: block;
    width: 100%;
    height: 100%;
    border-radius: calc(infinity * 1px);
    --tw-content: "";
    content: var(--tw-content);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
  }
  .radio:focus-visible {
    outline: 2px solid var(--input-color, var(--color-neutral));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .radio:focus-visible {
      outline: 2px solid color-mix(in oklab, var(--input-color, var(--color-neutral)) 30%, #0000);
    }
  }
  .radio:focus-visible {
    outline-offset: 0px;
  }
  .radio:checked, .radio[aria-checked="true"] {
    animation: radio 0.2s ease-out;
    border-color: currentColor;
    background-color: var(--color-base-100);
    box-shadow: 0 1px 2px 0 var(--color-base-300);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .radio:checked, .radio[aria-checked="true"] {
      box-shadow: 0 1px 2px 0 color-mix(in oklab, var(--color-base-300) 30%, #0000);
    }
  }
  .radio:checked:before, .radio[aria-checked="true"]:before {
    background-color: currentColor;
    box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
  }
  @media (forced-colors: active) {
    .radio:checked:before, .radio[aria-checked="true"]:before {
      outline-style: var(--tw-outline-style);
      outline-width: 1px;
      outline-offset: calc(1px * -1);
    }
  }
  @media print {
    .radio:checked:before, .radio[aria-checked="true"]:before {
      outline: 0.25rem solid;
      outline-offset: -1rem;
    }
  }
  .radio:disabled {
    cursor: not-allowed;
    opacity: 50%;
  }
  .carousel {
    position: relative;
    width: 100%;
    overflow: hidden;
    border-radius: var(--radius-2xl);
  }
  .alert {
    position: relative;
    width: 100%;
    border-radius: var(--radius-box);
    padding: calc(0.25rem * 4);
    color: var(--color-neutral-content);
    text-align: start;
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
    background-color: var(--alert-bg);
    border: var(--border) solid var(--alert-border);
    box-shadow: 0 0.1875rem 0 -0.125rem oklch(100% 0 0 / calc(var(--depth) * 0.08)) inset;
    --alert-bg: var(--alert-color, var(--color-neutral));
    --alert-border: var(--alert-color, var(--color-neutral));
  }
  .alert.alert-outline {
    color: var(--alert-color, var(--color-neutral));
    --alert-bg: transparent;
    box-shadow: none;
    background-image: none;
  }
  .alert.alert-soft {
    color: var(--alert-color, var(--color-neutral));
    --alert-bg: var(--alert-color, var(--color-neutral));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .alert.alert-soft {
      --alert-bg: color-mix(in oklab, var(--alert-color, var(--color-neutral)) 10%, var(--color-base-100));
    }
  }
  .alert.alert-soft {
    box-shadow: none;
    background-image: none;
  }
  .absolute {
    position: absolute;
  }
  .fixed {
    position: fixed;
  }
  .relative {
    position: relative;
  }
  .static {
    position: static;
  }
  .sticky {
    position: sticky;
  }
  .inset-0 {
    inset: calc(var(--spacing) * 0);
  }
  .top-0 {
    top: calc(var(--spacing) * 0);
  }
  .top-full {
    top: 100%;
  }
  .bottom-full {
    bottom: 100%;
  }
  .input {
    display: inline-flex;
    width: 100%;
    flex-shrink: 1;
    cursor: text;
    appearance: none;
    background-color: var(--color-base-100);
    padding-inline: calc(0.25rem * 3);
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    --tw-font-weight: var(--font-weight-normal);
    font-weight: var(--font-weight-normal);
    color: var(--color-base-content);
  }
  .input::placeholder {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .input::placeholder {
      color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
  }
  .input:focus-visible {
    --tw-outline-style: none;
    outline-style: none;
  }
  .input {
    border: var(--border) solid #0000;
    height: var(--size);
    touch-action: manipulation;
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    border-color: var(--input-color);
    --input-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .input {
      --input-color: color-mix(in oklab, var(--color-base-content) 40%, #0000);
    }
  }
  .input {
    --size: calc(var(--size-field, 0.25rem) * 9.5);
  }
  .input:hover:not(:focus, :focus-within), .input:has(:hover):not(:focus, :focus-within) {
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .input:hover:not(:focus, :focus-within), .input:has(:hover):not(:focus, :focus-within) {
      border-color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
    }
  }
  .input:where(input) {
    display: inline-block;
  }
  .input :where(input:not([type="checkbox"]):not([type="radio"])) {
    display: inline-block;
    height: 100%;
    width: 100%;
    appearance: none;
    background-color: transparent;
    border: none;
  }
  .input :where(input:not([type="checkbox"]):not([type="radio"])):focus, .input :where(input:not([type="checkbox"]):not([type="radio"])):focus-within, .input :where(input:not([type="checkbox"]):not([type="radio"])):focus-visible {
    --tw-outline-style: none;
    outline-style: none;
  }
  .input:focus, .input:focus-within {
    --tw-shadow: 0 1px 2px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.05));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    --input-color: var(--color-primary);
    --tw-shadow-color: var(--input-color);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .input:focus, .input:focus-within {
      --tw-shadow-color: color-mix(in oklab, var(--input-color) 30%, #0000);
    }
  }
  .input:focus, .input:focus-within {
    outline: 1px solid var(--input-color);
    isolation: isolate;
  }
  .input:has(> input[disabled]), .input:is(:disabled, [disabled]) {
    cursor: not-allowed;
    border-style: var(--tw-border-style);
    border-width: 0px;
    background-color: var(--color-neutral);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .input:has(> input[disabled]), .input:is(:disabled, [disabled]) {
      background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
    }
  }
  .input:has(> input[disabled]), .input:is(:disabled, [disabled]) {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .input:has(> input[disabled]), .input:is(:disabled, [disabled]) {
      color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
  }
  .input:has(> input[disabled]), .input:is(:disabled, [disabled]) {
    box-shadow: none;
  }
  .input:has(> input[disabled]) > input[disabled] {
    cursor: not-allowed;
  }
  .input::-webkit-date-and-time-value {
    text-align: inherit;
  }
  .input[type="number"]::-webkit-inner-spin-button {
    margin-block: calc(0.25rem * -3);
    margin-inline-end: calc(0.25rem * -3);
  }
  .input:has(> .input-floating) input::placeholder {
    color: transparent;
  }
  .input:has(> .input-floating) input:focus::placeholder {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .input:has(> .input-floating) input:focus::placeholder {
      color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
  }
  .dropdown-menu {
    z-index: 10;
    margin-top: calc(0.25rem * 2);
  }
  :where(.dropdown-menu > :not(:last-child)) {
    --tw-space-y-reverse: 0;
    margin-block-start: calc(calc(0.25rem * 1) * var(--tw-space-y-reverse));
    margin-block-end: calc(calc(0.25rem * 1) * calc(1 - var(--tw-space-y-reverse)));
  }
  .dropdown-menu {
    border-radius: var(--radius-box);
    background-color: var(--color-base-100);
    padding: calc(0.25rem * 2);
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    text-wrap: nowrap;
    opacity: 0%;
    --tw-shadow: 0 4px 6px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 2px 4px -2px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    --tw-shadow-color: var(--color-base-300);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .dropdown-menu {
      --tw-shadow-color: color-mix(in oklab, color-mix(in oklab, var(--color-base-300) 20%, transparent) var(--tw-shadow-alpha), transparent);
    }
  }
  .dropdown-menu {
    transition-property: opacity,margin;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
    transition-duration: 300ms;
    --tw-duration: 300ms;
  }
  .container {
    width: 100%;
  }
  @media (width >= 40rem) {
    .container {
      max-width: 40rem;
    }
  }
  @media (width >= 48rem) {
    .container {
      max-width: 48rem;
    }
  }
  @media (width >= 64rem) {
    .container {
      max-width: 64rem;
    }
  }
  @media (width >= 80rem) {
    .container {
      max-width: 80rem;
    }
  }
  @media (width >= 96rem) {
    .container {
      max-width: 96rem;
    }
  }
  .filter {
    display: flex;
    flex-wrap: wrap;
  }
  .filter input[type="radio"] {
    width: auto;
  }
  .filter input {
    overflow: hidden;
    opacity: 100%;
    scale: 1;
    border-width: 0;
    transition: margin 0.1s, opacity 0.3s, padding 0.3s, border-width 0.1s;
  }
  .filter input:not(:last-child) {
    margin-inline-end: calc(0.25rem * 1);
  }
  .filter input.filter-reset {
    aspect-ratio: 1 / 1;
  }
  .filter input.filter-reset::after {
    content: "×";
  }
  .filter:not(:has(input:checked:not(.filter-reset))) .filter-reset, .filter:not(:has(input:checked:not(.filter-reset))) input[type="reset"] {
    scale: 0;
    border-width: 0;
    margin-inline: calc(0.25rem * 0);
    width: calc(0.25rem * 0);
    padding-inline: calc(0.25rem * 0);
    opacity: 0%;
  }
  .filter:has(input:checked:not(.filter-reset)) input:not(:checked, .filter-reset, input[type="reset"]) {
    scale: 0;
    border-width: 0;
    margin-inline: calc(0.25rem * 0);
    width: calc(0.25rem * 0);
    padding-inline: calc(0.25rem * 0);
    opacity: 0%;
  }
  .mx-auto {
    margin-inline: auto;
  }
  .my-2 {
    margin-block: calc(var(--spacing) * 2);
  }
  .\!ms-auto {
    margin-inline-start: auto !important;
  }
  .ms-0\.5 {
    margin-inline-start: calc(var(--spacing) * 0.5);
  }
  .ms-2 {
    margin-inline-start: calc(var(--spacing) * 2);
  }
  .input::file-selector-button {
    margin-inline-end: calc(0.25rem * 4);
    display: inline-flex;
    height: 100%;
    flex-shrink: 0;
    cursor: pointer;
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
    border-style: var(--tw-border-style);
    border-width: 0px;
    background-color: var(--color-primary);
    padding-inline: calc(0.25rem * 4);
    text-align: center;
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    --tw-leading: 1;
    --tw-font-weight: var(--font-weight-semibold);
    font-weight: var(--font-weight-semibold);
    color: var(--color-primary-content);
    text-transform: uppercase;
    text-decoration-line: none;
    webkit-user-select: none;
    user-select: none;
    --input-color: var(--color-primary);
  }
  .input::file-selector-button.input-sm {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
  }
  .input::file-selector-button.input-md {
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
  }
  .input::file-selector-button.input-lg {
    font-size: var(--text-lg);
    line-height: var(--tw-leading, var(--text-lg--line-height));
  }
  .input::file-selector-button.input-xl {
    font-size: var(--text-xl);
    line-height: var(--tw-leading, var(--text-xl--line-height));
  }
  .input[type="file"] {
    overflow: hidden;
    padding-inline-start: calc(0.25rem * 0);
  }
  .input-floating .input::file-selector-button {
    background-color: var(--color-base-100);
    color: var(--color-base-content);
    border-inline-end: var(--border) solid var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .input-floating .input::file-selector-button {
      border-inline-end: var(--border) solid color-mix(in oklab, var(--color-base-content) 40%, #0000);
    }
  }
  .input-floating .input::file-selector-button {
    outline: none;
  }
  .\!me-1\.5 {
    margin-inline-end: calc(var(--spacing) * 1.5) !important;
  }
  .mt-8 {
    margin-top: calc(var(--spacing) * 8);
  }
  .mb-0\.5 {
    margin-bottom: calc(var(--spacing) * 0.5);
  }
  .mb-1 {
    margin-bottom: calc(var(--spacing) * 1);
  }
  .mb-2 {
    margin-bottom: calc(var(--spacing) * 2);
  }
  .mb-4 {
    margin-bottom: calc(var(--spacing) * 4);
  }
  .status {
    display: inline-block;
    aspect-ratio: 1 / 1;
    width: calc(0.25rem * 2.5);
    height: calc(0.25rem * 2.5);
    border-radius: calc(infinity * 1px);
    background-color: var(--color-neutral);
    background-position: center;
    background-repeat: no-repeat;
    vertical-align: middle;
    color: var(--color-neutral);
    background-image: radial-gradient(circle at 35% 30%, oklch(1 0 0 / calc(var(--depth) * 0.5)), #0000);
    box-shadow: 0 2px 3px -1px currentColor;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .status {
      box-shadow: 0 2px 3px -1px color-mix(in oklab, currentColor calc(var(--depth) * 100%), #0000);
    }
  }
  .divider {
    display: flex;
    width: 100%;
    align-items: center;
    align-self: stretch;
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
    white-space: nowrap;
  }
  .divider:not(:empty) {
    gap: calc(0.25rem * 4);
  }
  .divider:before {
    content: "";
    height: 1px;
    width: 100%;
    flex-grow: 1;
    border-inline-end-style: var(--tw-border-style);
    border-inline-end-width: 0px;
    border-top-style: var(--tw-border-style);
    border-top-width: 1px;
    --tw-border-style: solid;
    border-style: solid;
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .divider:before {
      border-color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }
  .divider:after {
    content: "";
    height: 1px;
    width: 100%;
    flex-grow: 1;
    border-inline-end-style: var(--tw-border-style);
    border-inline-end-width: 0px;
    border-top-style: var(--tw-border-style);
    border-top-width: 1px;
    --tw-border-style: solid;
    border-style: solid;
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .divider:after {
      border-color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }
  .progress {
    display: flex;
    height: calc(0.25rem * 1.5);
    width: 100%;
    overflow: hidden;
    border-radius: var(--radius-box);
    background-color: var(--color-base-200);
  }
  .icon-\[tabler--check\] {
    display: inline-block;
    width: 1em;
    height: 1em;
    background-color: currentColor;
    -webkit-mask-image: var(--svg);
    mask-image: var(--svg);
    -webkit-mask-repeat: no-repeat;
    mask-repeat: no-repeat;
    -webkit-mask-size: 100% 100%;
    mask-size: 100% 100%;
    --svg: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' width='24' height='24'%3E%3Cpath fill='none' stroke='black' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m5 12l5 5L20 7'/%3E%3C/svg%3E");
  }
  .icon-\[tabler--trash\] {
    display: inline-block;
    width: 1em;
    height: 1em;
    background-color: currentColor;
    -webkit-mask-image: var(--svg);
    mask-image: var(--svg);
    -webkit-mask-repeat: no-repeat;
    mask-repeat: no-repeat;
    -webkit-mask-size: 100% 100%;
    mask-size: 100% 100%;
    --svg: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' width='24' height='24'%3E%3Cpath fill='none' stroke='black' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M4 7h16m-10 4v6m4-6v6M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2l1-12M9 7V4a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v3'/%3E%3C/svg%3E");
  }
  .icon-\[tabler--trending-down\] {
    display: inline-block;
    width: 1em;
    height: 1em;
    background-color: currentColor;
    -webkit-mask-image: var(--svg);
    mask-image: var(--svg);
    -webkit-mask-repeat: no-repeat;
    mask-repeat: no-repeat;
    -webkit-mask-size: 100% 100%;
    mask-size: 100% 100%;
    --svg: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' width='24' height='24'%3E%3Cg fill='none' stroke='black' stroke-linecap='round' stroke-linejoin='round' stroke-width='2'%3E%3Cpath d='m3 7l6 6l4-4l8 8'/%3E%3Cpath d='M21 10v7h-7'/%3E%3C/g%3E%3C/svg%3E");
  }
  .icon-\[tabler--trending-up\] {
    display: inline-block;
    width: 1em;
    height: 1em;
    background-color: currentColor;
    -webkit-mask-image: var(--svg);
    mask-image: var(--svg);
    -webkit-mask-repeat: no-repeat;
    mask-repeat: no-repeat;
    -webkit-mask-size: 100% 100%;
    mask-size: 100% 100%;
    --svg: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' width='24' height='24'%3E%3Cg fill='none' stroke='black' stroke-linecap='round' stroke-linejoin='round' stroke-width='2'%3E%3Cpath d='m3 17l6-6l4 4l8-8'/%3E%3Cpath d='M14 7h7v7'/%3E%3C/g%3E%3C/svg%3E");
  }
  .tabs {
    display: flex;
    --tabs-height: auto;
    --tabs-direction: row;
    height: var(--tabs-height);
    flex-direction: var(--tabs-direction);
  }
  .progress-bar {
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    border-radius: var(--radius-box);
    background-color: var(--color-neutral);
    font-size: var(--text-xs);
    line-height: var(--tw-leading, var(--text-xs--line-height));
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
    white-space: nowrap;
    color: var(--color-neutral-content);
    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-timing-function: var(--ease-in-out);
    transition-duration: var(--tw-duration, var(--default-transition-duration));
    transition-duration: 500ms;
    --tw-duration: 500ms;
    --tw-ease: var(--ease-in-out);
  }
  .progress-bar.progress-indeterminate {
    width: 100%;
    background: linear-gradient(90deg, rgba(0, 0, 0, 0) 50%, var(--progress-color) 50%);
    background-size: 50% 100%;
    background-repeat: no-repeat;
    animation: indeterminate-progress 4s infinite ease-in-out;
  }
  .card-body {
    display: flex;
    flex: auto;
    flex-direction: column;
    gap: calc(0.25rem * 2);
    padding: var(--card-p, 1.5rem);
  }
  .card-body :where(p) {
    flex-grow: 1;
  }
  :where(.card-header) + .card-body {
    padding-top: 0;
  }
  :where(.card-body) + .card-footer {
    padding-top: 0;
  }
  .carousel-body {
    display: flex;
    flex-wrap: nowrap;
    transition-property: transform, translate, scale, rotate;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
    transition-duration: 700ms;
    --tw-duration: 700ms;
  }
  .tooltip {
    display: inline-block;
    text-align: center;
  }
  .\!flex {
    display: flex !important;
  }
  .block {
    display: block;
  }
  .contents {
    display: contents;
  }
  .flex {
    display: flex;
  }
  .hidden {
    display: none;
  }
  .inline {
    display: inline;
  }
  .inline-block {
    display: inline-block;
  }
  .table {
    display: table;
  }
  .btn-circle {
    border-radius: calc(infinity * 1px);
    padding-inline: calc(0.25rem * 0);
    width: var(--size);
    height: var(--size);
  }
  .size-4 {
    width: calc(var(--spacing) * 4);
    height: calc(var(--spacing) * 4);
  }
  .size-5 {
    width: calc(var(--spacing) * 5);
    height: calc(var(--spacing) * 5);
  }
  .size-8 {
    width: calc(var(--spacing) * 8);
    height: calc(var(--spacing) * 8);
  }
  .input > .select {
    height: auto;
    border-style: var(--tw-border-style);
    border-width: 0px;
  }
  .input > .select:focus, .input > .select:focus-within {
    --tw-shadow: 0 0 #0000;
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    outline-style: var(--tw-outline-style);
    outline-width: 0px;
  }
  .\!h-2\.5 {
    height: calc(var(--spacing) * 2.5) !important;
  }
  .h-2 {
    height: calc(var(--spacing) * 2);
  }
  .min-h-screen {
    min-height: 100vh;
  }
  .advance-select-option {
    width: 100%;
    cursor: pointer;
    border-radius: var(--radius-field);
    padding-inline: calc(0.25rem * 4);
    padding-block: calc(0.25rem * 2.5);
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    --tw-font-weight: var(--font-weight-normal);
    font-weight: var(--font-weight-normal);
    color: var(--color-base-content);
  }
  @media (hover: hover) {
    .advance-select-option:hover {
      background-color: var(--color-neutral);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .advance-select-option:hover {
        background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
      }
    }
  }
  .advance-select-option:focus {
    background-color: var(--color-neutral);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .advance-select-option:focus {
      background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
    }
  }
  .advance-select-option:focus {
    --tw-outline-style: none;
    outline-style: none;
  }
  .\!w-2\.5 {
    width: calc(var(--spacing) * 2.5) !important;
  }
  .w-full {
    width: 100%;
  }
  .max-w-full {
    max-width: 100%;
  }
  .max-w-md {
    max-width: var(--container-md);
  }
  .min-w-28 {
    min-width: calc(var(--spacing) * 28);
  }
  .min-w-48 {
    min-width: calc(var(--spacing) * 48);
  }
  .flex-1 {
    flex: 1;
  }
  .flex-shrink-0 {
    flex-shrink: 0;
  }
  .shrink-0 {
    flex-shrink: 0;
  }
  .transform {
    transform: var(--tw-rotate-x,) var(--tw-rotate-y,) var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
  }
  .cursor-pointer {
    cursor: pointer;
  }
  .resize {
    resize: both;
  }
  .flex-col {
    flex-direction: column;
  }
  .flex-nowrap {
    flex-wrap: nowrap;
  }
  .items-center {
    align-items: center;
  }
  .\!justify-between {
    justify-content: space-between !important;
  }
  .justify-between {
    justify-content: space-between;
  }
  .justify-center {
    justify-content: center;
  }
  .gap-2 {
    gap: calc(var(--spacing) * 2);
  }
  :where(.space-y-2 > :not(:last-child)) {
    --tw-space-y-reverse: 0;
    margin-block-start: calc(calc(var(--spacing) * 2) * var(--tw-space-y-reverse));
    margin-block-end: calc(calc(var(--spacing) * 2) * calc(1 - var(--tw-space-y-reverse)));
  }
  .gap-x-1 {
    column-gap: calc(var(--spacing) * 1);
  }
  .gap-x-2 {
    column-gap: calc(var(--spacing) * 2);
  }
  .gap-x-3 {
    column-gap: calc(var(--spacing) * 3);
  }
  :where(.accordion:where(.accordion-bordered) > :not(:last-child)) {
    --tw-divide-y-reverse: 0;
    border-bottom-style: var(--tw-border-style);
    border-top-style: var(--tw-border-style);
    border-top-width: calc(1px * var(--tw-divide-y-reverse));
    border-bottom-width: calc(1px * calc(1 - var(--tw-divide-y-reverse)));
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    :where(.accordion:where(.accordion-bordered) > :not(:last-child)) {
      border-color: color-mix(in oklab, var(--color-base-content) 25%, transparent);
    }
  }
  .accordion:where(.accordion-bordered) {
    border-radius: var(--radius-box);
    border-style: var(--tw-border-style);
    border-width: 1px;
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .accordion:where(.accordion-bordered) {
      border-color: color-mix(in oklab, var(--color-base-content) 25%, transparent);
    }
  }
  .accordion:where(.accordion-bordered) {
    background-color: var(--color-base-100);
  }
  .truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  .overflow-x-auto {
    overflow-x: auto;
  }
  .overflow-y-auto {
    overflow-y: auto;
  }
  :where(.menu-horizontal > li:not(.menu-title) > .collapse > ul) {
    border-radius: var(--radius-box);
    background-color: var(--color-base-100);
    --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 1px 2px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    --tw-shadow-color: var(--color-base-300);
  }
  @supports (color: color-mix(in lab, red, red)) {
    :where(.menu-horizontal > li:not(.menu-title) > .collapse > ul) {
      --tw-shadow-color: color-mix(in oklab, color-mix(in oklab, var(--color-base-300) 20%, transparent) var(--tw-shadow-alpha), transparent);
    }
  }
  .\!rounded-full {
    border-radius: calc(infinity * 1px) !important;
  }
  .\!rounded-xs {
    border-radius: var(--radius-xs) !important;
  }
  .rounded-box {
    border-radius: var(--radius-box);
  }
  .rounded-box {
    border-radius: var(--radius-box);
  }
  .rounded-field {
    border-radius: var(--radius-field);
  }
  .rounded-field {
    border-radius: var(--radius-field);
  }
  .rounded-lg {
    border-radius: var(--radius-lg);
  }
  .rounded-md {
    border-radius: var(--radius-md);
  }
  .rounded-t-lg {
    border-top-left-radius: var(--radius-lg);
    border-top-right-radius: var(--radius-lg);
  }
  .border {
    border-style: var(--tw-border-style);
    border-width: 1px;
  }
  .btn-text {
    --btn-shadow: "";
    color: var(--btn-color, var(--color-neutral));
    --btn-bg: "";
    --btn-border: "";
    --btn-noise: none;
    border-width: 0;
    outline-color: var(--btn-color, var(--color-neutral));
  }
  @media (hover: hover) {
    .btn-text:hover {
      --btn-bg: var(--btn-color, var(--color-neutral));
    }
    @supports (color: color-mix(in lab, red, red)) {
      .btn-text:hover {
        --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 10%, #0000);
      }
    }
  }
  .btn-text:focus-visible {
    --btn-bg: var(--btn-color, var(--color-neutral));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn-text:focus-visible {
      --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 10%, #0000);
    }
  }
  .btn-text.btn-active {
    --btn-bg: var(--btn-color, var(--color-neutral));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn-text.btn-active {
      --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 10%, #0000);
    }
  }
  .btn-soft {
    --btn-shadow: "";
    color: var(--btn-color, var(--color-neutral));
    --btn-bg: var(--btn-color, var(--color-neutral));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn-soft {
      --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 10%, var(--color-base-100));
    }
  }
  .btn-soft {
    border-width: 0;
    --btn-noise: none;
  }
  .btn-soft:focus-visible {
    --btn-bg: var(--btn-color, var(--color-neutral));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn-soft:focus-visible {
      --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 20%, var(--color-base-100));
    }
  }
  @media (hover: hover) {
    .btn-soft:hover {
      --btn-bg: var(--btn-color, var(--color-neutral));
    }
    @supports (color: color-mix(in lab, red, red)) {
      .btn-soft:hover {
        --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 20%, var(--color-base-100));
      }
    }
  }
  .btn-soft.btn-active {
    --btn-bg: var(--btn-color, var(--color-neutral));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn-soft.btn-active {
      --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 20%, var(--color-base-100));
    }
  }
  .\!border-none {
    --tw-border-style: none !important;
    border-style: none !important;
  }
  .input.is-valid, .input:has(.is-valid), .validate .input:valid, .validate .input:has(:valid) {
    border-color: var(--color-success);
  }
  @media (hover: hover) {
    .input.is-valid:hover, .input:has(.is-valid):hover, .validate .input:valid:hover, .validate .input:has(:valid):hover {
      border-color: var(--color-success);
    }
  }
  .input.is-valid:has(:hover):not(:focus, :focus-within), .input:has(.is-valid):has(:hover):not(:focus, :focus-within), .validate .input:valid:has(:hover):not(:focus, :focus-within), .validate .input:has(:valid):has(:hover):not(:focus, :focus-within) {
    border-color: var(--color-success);
  }
  .input.is-valid:focus, .input.is-valid:focus-within, .input:has(.is-valid):focus, .input:has(.is-valid):focus-within, .validate .input:valid:focus, .validate .input:valid:focus-within, .validate .input:has(:valid):focus, .validate .input:has(:valid):focus-within {
    --input-color: var(--color-success);
  }
  .input.is-invalid, .input:has(.is-invalid), .validate .input:invalid, .validate .input:has(:invalid) {
    border-color: var(--color-error);
  }
  @media (hover: hover) {
    .input.is-invalid:hover, .input:has(.is-invalid):hover, .validate .input:invalid:hover, .validate .input:has(:invalid):hover {
      border-color: var(--color-error);
    }
  }
  .input.is-invalid:has(:hover):not(:focus, :focus-within), .input:has(.is-invalid):has(:hover):not(:focus, :focus-within), .validate .input:invalid:has(:hover):not(:focus, :focus-within), .validate .input:has(:invalid):has(:hover):not(:focus, :focus-within) {
    border-color: var(--color-error);
  }
  .input.is-invalid:focus, .input.is-invalid:focus-within, .input:has(.is-invalid):focus, .input:has(.is-invalid):focus-within, .validate .input:invalid:focus, .validate .input:invalid:focus-within, .validate .input:has(:invalid):focus, .validate .input:has(:invalid):focus-within {
    --input-color: var(--color-error);
  }
  .input.is-valid::file-selector-button {
    background-color: var(--color-success);
    color: var(--color-success-content);
    --input-color: var(--color-success);
  }
  .validate .input:valid::file-selector-button {
    background-color: var(--color-success);
    color: var(--color-success-content);
    --input-color: var(--color-success);
  }
  .input.is-invalid::file-selector-button {
    background-color: var(--color-error);
    color: var(--color-error-content);
    --input-color: var(--color-error);
  }
  .validate .input:invalid::file-selector-button {
    background-color: var(--color-error);
    color: var(--color-error-content);
    --input-color: var(--color-error);
  }
  .input-floating > .input.is-valid::file-selector-button {
    background-color: var(--color-base-100);
    color: var(--color-base-content);
    border-inline-end: var(--border) solid var(--color-success);
  }
  .validate .input-floating > .input:valid::file-selector-button {
    background-color: var(--color-base-100);
    color: var(--color-base-content);
    border-inline-end: var(--border) solid var(--color-success);
  }
  .input-floating > .input.is-invalid::file-selector-button {
    background-color: var(--color-base-100);
    color: var(--color-base-content);
    border-inline-end: var(--border) solid var(--color-error);
  }
  .validate .input-floating > .input:invalid::file-selector-button {
    background-color: var(--color-base-100);
    color: var(--color-base-content);
    border-inline-end: var(--border) solid var(--color-error);
  }
  .input.is-invalid::file-selector-button {
    background-color: var(--color-error);
    color: var(--color-error-content);
    --input-color: var(--color-error);
  }
  .input-floating > .input.is-invalid::file-selector-button {
    background-color: var(--color-base-100);
    color: var(--color-base-content);
    border-inline-end: var(--border) solid var(--color-error);
  }
  .label-text:has(~ .is-invalid) {
    color: var(--color-error);
  }
  .label-text:has(~ * .is-invalid) {
    color: var(--color-error);
  }
  :is(.is-invalid) ~ .helper-text {
    color: var(--color-error);
  }
  *:has(.is-invalid) ~ .helper-text {
    color: var(--color-error);
  }
  :is(.is-invalid) ~ .label-text {
    color: var(--color-error);
  }
  :is(.is-invalid) ~ .label-text * {
    color: var(--color-error);
  }
  :is(.is-invalid) ~ * >.label-text {
    color: var(--color-error);
  }
  select.is-invalid + .advance-select-toggle {
    --input-color: var(--color-error);
  }
  select.is-invalid + .advance-select-toggle:focus, select.is-invalid + .advance-select-toggle:focus-within {
    --input-color: var(--color-error);
  }
  .advance-select-tag:has(> .is-invalid) {
    --input-color: var(--color-error);
  }
  .advance-select-tag:has(> .is-invalid):focus, .advance-select-tag:has(> .is-invalid):focus-within {
    --input-color: var(--color-error);
  }
  @media (hover: hover) {
    .input-floating:has(.is-invalid):hover {
      border-color: var(--color-error);
    }
  }
  .input-floating:has(.is-invalid) .input-floating-label {
    color: var(--color-error);
  }
  .input-floating:has(.is-invalid):focus-within .input-floating-label, .input-floating:has(.is-invalid):not(:has(input:placeholder-shown)) .input-floating-label, .input-floating:has(.is-invalid):has(.input:focus) .input-floating-label {
    color: var(--color-error);
  }
  .textarea-floating:has(.is-invalid) .textarea-floating-label {
    color: var(--color-error);
  }
  .textarea-floating:has(.is-invalid):focus-within .textarea-floating-label, .textarea-floating:has(.is-invalid):not(:has(textarea:placeholder-shown)) .textarea-floating-label, .textarea-floating:has(.is-invalid):has(.textarea:focus) .textarea-floating-label {
    color: var(--color-error);
  }
  .select-floating:has(.is-invalid) .select-floating-label {
    color: var(--color-error);
  }
  .select-floating:has(.is-invalid):focus-within .select-floating-label, .select-floating:has(.is-invalid):not(:has(select:placeholder-shown)) .select-floating-label, .select-floating:has(.is-invalid):has(.select:focus) .select-floating-label {
    color: var(--color-error);
  }
  .input.is-valid::file-selector-button {
    background-color: var(--color-success);
    color: var(--color-success-content);
    --input-color: var(--color-success);
  }
  .input-floating > .input.is-valid::file-selector-button {
    background-color: var(--color-base-100);
    color: var(--color-base-content);
    border-inline-end: var(--border) solid var(--color-success);
  }
  .label-text:has(~ .is-valid) {
    color: var(--color-success);
  }
  .label-text:has(~ * .is-valid) {
    color: var(--color-success);
  }
  :is(.is-valid) ~ .helper-text {
    color: var(--color-success);
  }
  *:has(.is-valid) ~ .helper-text {
    color: var(--color-success);
  }
  :is(.is-valid) ~ .label-text {
    color: var(--color-success);
  }
  :is(.is-valid) ~ .label-text * {
    color: var(--color-success);
  }
  :is(.is-valid) ~ * >.label-text {
    color: var(--color-success);
  }
  select.is-valid + .advance-select-toggle {
    --input-color: var(--color-success);
  }
  select.is-valid + .advance-select-toggle:focus, select.is-valid + .advance-select-toggle:focus-within {
    --input-color: var(--color-success);
  }
  .advance-select-tag:has(> .is-valid) {
    --input-color: var(--color-success);
  }
  .advance-select-tag:has(> .is-valid):focus, .advance-select-tag:has(> .is-valid):focus-within {
    --input-color: var(--color-success);
  }
  @media (hover: hover) {
    .input-floating:has(.is-valid):hover {
      border-color: var(--color-success);
    }
  }
  .input-floating:has(.is-valid) .input-floating-label {
    color: var(--color-success);
  }
  .input-floating:has(.is-valid):focus-within .input-floating-label, .input-floating:has(.is-valid):not(:has(input:placeholder-shown)) .input-floating-label, .input-floating:has(.is-valid):has(.input:focus) .input-floating-label {
    color: var(--color-success);
  }
  .textarea-floating:has(.is-valid) .textarea-floating-label {
    color: var(--color-success);
  }
  .textarea-floating:has(.is-valid):focus-within .textarea-floating-label, .textarea-floating:has(.is-valid):not(:has(textarea:placeholder-shown)) .textarea-floating-label, .textarea-floating:has(.is-valid):has(.textarea:focus) .textarea-floating-label {
    color: var(--color-success);
  }
  .select-floating:has(.is-valid) .select-floating-label {
    color: var(--color-success);
  }
  .select-floating:has(.is-valid):focus-within .select-floating-label, .select-floating:has(.is-valid):not(:has(select:placeholder-shown)) .select-floating-label, .select-floating:has(.is-valid):has(.select:focus) .select-floating-label {
    color: var(--color-success);
  }
  .checkbox.is-valid, .checkbox:has(.is-valid), .validate .checkbox:valid, .validate .checkbox:has(:valid) {
    --input-color: var(--color-success);
    border-color: var(--input-color);
  }
  .checkbox.is-valid:checked, .checkbox.is-valid[aria-checked="true"], .checkbox.is-valid:has(> input:checked), .checkbox:has(.is-valid):checked, .checkbox:has(.is-valid)[aria-checked="true"], .checkbox:has(.is-valid):has(> input:checked), .validate .checkbox:valid:checked, .validate .checkbox:valid[aria-checked="true"], .validate .checkbox:valid:has(> input:checked), .validate .checkbox:has(:valid):checked, .validate .checkbox:has(:valid)[aria-checked="true"], .validate .checkbox:has(:valid):has(> input:checked) {
    --input-color: var(--color-success);
  }
  .checkbox.is-invalid, .checkbox:has(.is-invalid), .validate .checkbox:invalid, .validate .checkbox:has(:invalid) {
    --input-color: var(--color-error);
    border-color: var(--input-color);
  }
  .checkbox.is-invalid:checked, .checkbox.is-invalid[aria-checked="true"], .checkbox.is-invalid:has(> input:checked), .checkbox:has(.is-invalid):checked, .checkbox:has(.is-invalid)[aria-checked="true"], .checkbox:has(.is-invalid):has(> input:checked), .validate .checkbox:invalid:checked, .validate .checkbox:invalid[aria-checked="true"], .validate .checkbox:invalid:has(> input:checked), .validate .checkbox:has(:invalid):checked, .validate .checkbox:has(:invalid)[aria-checked="true"], .validate .checkbox:has(:invalid):has(> input:checked) {
    --input-color: var(--color-error);
  }
  .checkbox.is-valid, .checkbox:has(.is-valid), .validate .checkbox:valid, .validate .checkbox:has(:valid) {
    color: var(--color-success-content);
  }
  .checkbox.is-invalid, .checkbox:has(.is-invalid), .validate .checkbox:invalid, .validate .checkbox:has(:invalid) {
    color: var(--color-error-content);
  }
  .select.is-valid, .select:has(.is-valid), .validate .select:valid, .validate .select:has(:valid) {
    border-color: var(--color-success);
  }
  @media (hover: hover) {
    .select.is-valid:hover, .select:has(.is-valid):hover, .validate .select:valid:hover, .validate .select:has(:valid):hover {
      border-color: var(--color-success);
    }
  }
  .select.is-valid:has(:hover):not(:focus, :focus-within), .select:has(.is-valid):has(:hover):not(:focus, :focus-within), .validate .select:valid:has(:hover):not(:focus, :focus-within), .validate .select:has(:valid):has(:hover):not(:focus, :focus-within) {
    border-color: var(--color-success);
  }
  .select.is-valid:focus, .select.is-valid:focus-within, .select:has(.is-valid):focus, .select:has(.is-valid):focus-within, .validate .select:valid:focus, .validate .select:valid:focus-within, .validate .select:has(:valid):focus, .validate .select:has(:valid):focus-within {
    --input-color: var(--color-success);
  }
  .select.is-invalid, .select:has(.is-invalid), .validate .select:invalid, .validate .select:has(:invalid) {
    border-color: var(--color-error);
  }
  @media (hover: hover) {
    .select.is-invalid:hover, .select:has(.is-invalid):hover, .validate .select:invalid:hover, .validate .select:has(:invalid):hover {
      border-color: var(--color-error);
    }
  }
  .select.is-invalid:has(:hover):not(:focus, :focus-within), .select:has(.is-invalid):has(:hover):not(:focus, :focus-within), .validate .select:invalid:has(:hover):not(:focus, :focus-within), .validate .select:has(:invalid):has(:hover):not(:focus, :focus-within) {
    border-color: var(--color-error);
  }
  .select.is-invalid:focus, .select.is-invalid:focus-within, .select:has(.is-invalid):focus, .select:has(.is-invalid):focus-within, .validate .select:invalid:focus, .validate .select:invalid:focus-within, .validate .select:has(:invalid):focus, .validate .select:has(:invalid):focus-within {
    --input-color: var(--color-error);
  }
  .radio.is-valid, .radio:has(.is-valid), .validate .radio:valid, .validate .radio:has(:valid) {
    --input-color: var(--color-success);
    border-color: var(--input-color);
  }
  .radio.is-valid:checked, .radio.is-valid[aria-checked="true"], .radio.is-valid:has(> input:checked), .radio:has(.is-valid):checked, .radio:has(.is-valid)[aria-checked="true"], .radio:has(.is-valid):has(> input:checked), .validate .radio:valid:checked, .validate .radio:valid[aria-checked="true"], .validate .radio:valid:has(> input:checked), .validate .radio:has(:valid):checked, .validate .radio:has(:valid)[aria-checked="true"], .validate .radio:has(:valid):has(> input:checked) {
    --input-color: var(--color-success);
  }
  .radio.is-invalid, .radio:has(.is-invalid), .validate .radio:invalid, .validate .radio:has(:invalid) {
    --input-color: var(--color-error);
    border-color: var(--input-color);
  }
  .radio.is-invalid:checked, .radio.is-invalid[aria-checked="true"], .radio.is-invalid:has(> input:checked), .radio:has(.is-invalid):checked, .radio:has(.is-invalid)[aria-checked="true"], .radio:has(.is-invalid):has(> input:checked), .validate .radio:invalid:checked, .validate .radio:invalid[aria-checked="true"], .validate .radio:invalid:has(> input:checked), .validate .radio:has(:invalid):checked, .validate .radio:has(:invalid)[aria-checked="true"], .validate .radio:has(:invalid):has(> input:checked) {
    --input-color: var(--color-error);
  }
  .\!border-base-content\/40 {
    border-color: var(--color-base-content) !important;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .\!border-base-content\/40 {
      border-color: color-mix(in oklab, var(--color-base-content) 40%, transparent) !important;
    }
  }
  .border-base-content\/20 {
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .border-base-content\/20 {
      border-color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }
  .border-base-content\/40 {
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .border-base-content\/40 {
      border-color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
    }
  }
  .progress-primary {
    background-color: var(--color-primary);
    color: var(--color-primary-content);
  }
  .\!bg-base-100 {
    background-color: var(--color-base-100) !important;
  }
  .bg-base-100 {
    background-color: var(--color-base-100);
  }
  .bg-base-300\/60 {
    background-color: var(--color-base-300);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .bg-base-300\/60 {
      background-color: color-mix(in oklab, var(--color-base-300) 60%, transparent);
    }
  }
  .bg-white {
    background-color: var(--color-white);
  }
  .loading-spinner {
    mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='%23000' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cstyle%3E.spinner_V8m1%7Btransform-origin:center;animation:spinner_zKoa 2s linear infinite%7D.spinner_V8m1 circle%7Bstroke-linecap:round;animation:spinner_YpZS 1.5s ease-out infinite%7D%40keyframes spinner_zKoa%7B100%25%7Btransform:rotate(360deg)%7D%7D%40keyframes spinner_YpZS%7B0%25%7Bstroke-dasharray:0 150;stroke-dashoffset:0%7D47.5%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-16%7D95%25%2C100%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-59%7D%7D%3C%2Fstyle%3E%3Cg class='spinner_V8m1'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3'%3E%3C%2Fcircle%3E%3C%2Fg%3E%3C%2Fsvg%3E");
  }
  .fill-black {
    fill: var(--color-black);
  }
  .fill-gray-200 {
    fill: var(--color-gray-200);
  }
  .p-0\.5 {
    padding: calc(var(--spacing) * 0.5);
  }
  .p-2 {
    padding: calc(var(--spacing) * 2);
  }
  .p-3 {
    padding: calc(var(--spacing) * 3);
  }
  .p-4 {
    padding: calc(var(--spacing) * 4);
  }
  .\!px-2\.5 {
    padding-inline: calc(var(--spacing) * 2.5) !important;
  }
  .px-2 {
    padding-inline: calc(var(--spacing) * 2);
  }
  .px-3 {
    padding-inline: calc(var(--spacing) * 3);
  }
  .\!py-0\.5 {
    padding-block: calc(var(--spacing) * 0.5) !important;
  }
  .py-2 {
    padding-block: calc(var(--spacing) * 2);
  }
  .pt-3 {
    padding-top: calc(var(--spacing) * 3);
  }
  .align-bottom {
    vertical-align: bottom;
  }
  .card-title {
    font-size: var(--text-2xl);
    line-height: var(--tw-leading, var(--text-2xl--line-height));
    --tw-font-weight: var(--font-weight-semibold);
    font-weight: var(--font-weight-semibold);
    color: var(--color-base-content);
  }
  .btn-sm {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
    --btn-p: 0.75rem;
    --size: calc(var(--size-field, 0.25rem) * 7.5);
  }
  .\!text-sm {
    font-size: var(--text-sm) !important;
    line-height: var(--tw-leading, var(--text-sm--line-height)) !important;
  }
  .text-5xl {
    font-size: var(--text-5xl);
    line-height: var(--tw-leading, var(--text-5xl--line-height));
  }
  .text-base {
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
  }
  .text-lg {
    font-size: var(--text-lg);
    line-height: var(--tw-leading, var(--text-lg--line-height));
  }
  .text-sm {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
  }
  .text-xs {
    font-size: var(--text-xs);
    line-height: var(--tw-leading, var(--text-xs--line-height));
  }
  .\!font-medium {
    --tw-font-weight: var(--font-weight-medium) !important;
    font-weight: var(--font-weight-medium) !important;
  }
  .\!font-semibold {
    --tw-font-weight: var(--font-weight-semibold) !important;
    font-weight: var(--font-weight-semibold) !important;
  }
  .font-medium {
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
  }
  .font-semibold {
    --tw-font-weight: var(--font-weight-semibold);
    font-weight: var(--font-weight-semibold);
  }
  .whitespace-nowrap {
    white-space: nowrap;
  }
  .alert-success {
    color: var(--color-success-content);
    --alert-color: var(--color-success);
  }
  .text-base-content {
    color: var(--color-base-content);
  }
  .text-base-content\/50 {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .text-base-content\/50 {
      color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
  }
  .text-base-content\/80 {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .text-base-content\/80 {
      color: color-mix(in oklab, var(--color-base-content) 80%, transparent);
    }
  }
  .text-error {
    color: var(--color-error);
  }
  .text-primary {
    color: var(--color-primary);
  }
  .text-success {
    color: var(--color-success);
  }
  .lowercase {
    text-transform: lowercase;
  }
  .uppercase {
    text-transform: uppercase;
  }
  .opacity-0 {
    opacity: 0%;
  }
  .opacity-100 {
    opacity: 100%;
  }
  .shadow-lg {
    --tw-shadow: 0 10px 15px -3px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 4px 6px -4px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-md {
    --tw-shadow: 0 4px 6px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 2px 4px -2px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-xl {
    --tw-shadow: 0 20px 25px -5px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 8px 10px -6px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-base-300\/20 {
    --tw-shadow-color: var(--color-base-300);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .shadow-base-300\/20 {
      --tw-shadow-color: color-mix(in oklab, color-mix(in oklab, var(--color-base-300) 20%, transparent) var(--tw-shadow-alpha), transparent);
    }
  }
  .outline {
    outline-style: var(--tw-outline-style);
    outline-width: 1px;
  }
  .blur {
    --tw-blur: blur(8px);
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .filter {
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .carousel-slide {
    transition-property: transform, translate, scale, rotate;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
    transition-duration: 700ms;
    --tw-duration: 700ms;
  }
  .transition {
    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter, display, visibility, content-visibility, overlay, pointer-events;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .transition-all {
    transition-property: all;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .duration-300 {
    --tw-duration: 300ms;
    transition-duration: 300ms;
  }
  .duration-500 {
    --tw-duration: 500ms;
    transition-duration: 500ms;
  }
  .btn-primary {
    --btn-color: var(--color-primary);
    --btn-fg: var(--color-primary-content);
  }
  .validate select:has(~ * > .selected) + .advance-select-toggle {
    --input-color: var(--color-success);
  }
  .validate select:has(~ * > .selected) + .advance-select-toggle:focus, .validate select:has(~ * > .selected) + .advance-select-toggle:focus-within {
    --input-color: var(--color-success);
  }
  .focus\:border-primary:focus {
    border-color: var(--color-primary);
  }
  .focus\:ring-1:focus {
    --tw-ring-shadow: var(--tw-ring-inset,) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentcolor);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .focus\:ring-primary:focus {
    --tw-ring-color: var(--color-primary);
  }
  .focus\:outline-1:focus {
    outline-style: var(--tw-outline-style);
    outline-width: 1px;
  }
  .focus\:outline-primary:focus {
    outline-color: var(--color-primary);
  }
  .rtl\:\!mr-0:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
    margin-right: calc(var(--spacing) * 0) !important;
  }
  .combo-box-selected\:block.selected {
    display: block;
  }
  .selected .combo-box-selected\:block {
    display: block;
  }
  .combo-box-selected\:dropdown-active.selected {
    background-color: var(--color-primary);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .combo-box-selected\:dropdown-active.selected {
      background-color: color-mix(in oklab, var(--color-primary) 10%, transparent);
    }
  }
  .combo-box-selected\:dropdown-active.selected {
    color: var(--color-primary);
  }
  .selected .combo-box-selected\:dropdown-active {
    background-color: var(--color-primary);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .selected .combo-box-selected\:dropdown-active {
      background-color: color-mix(in oklab, var(--color-primary) 10%, transparent);
    }
  }
  .selected .combo-box-selected\:dropdown-active {
    color: var(--color-primary);
  }
  .file-upload-complete\:progress-success.complete {
    background-color: var(--color-success);
    color: var(--color-success-content);
  }
  .complete .file-upload-complete\:progress-success {
    background-color: var(--color-success);
    color: var(--color-success-content);
  }
}
@layer base {
  :where(:root),:root:has(input.theme-controller[value=light]:checked),[data-theme=light] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(97.8% 0.005 297.73);
    --color-base-300: oklch(37.01% 0.0069 297.49);
    --color-base-content: oklch(37.57% 0.022 281.8);
    --color-primary: oklch(57.59% 0.247 287.24);
    --color-primary-content: oklch(96.57% 0.017 289.61);
    --color-secondary: oklch(55.79% 0.022 301.91);
    --color-secondary-content: oklch(97.64% 0.001 286.38);
    --color-accent: oklch(62.31% 0.188 259.81);
    --color-accent-content: oklch(97.05% 0.014 254.6);
    --color-neutral: oklch(37.57% 0.0222 281.8);
    --color-neutral-content: oklch(0.98 0.0013 286.38);
    --color-info: oklch(71.48% 0.126 215.22);
    --color-info-content: oklch(98.41% 0.019 200.87);
    --color-success: oklch(73.11% 0.217 147.04);
    --color-success-content: oklch(98.1% 0.014 174.18);
    --color-warning: oklch(79.87% 0.164 73.09);
    --color-warning-content: oklch(99.34% 0.011 95.16);
    --color-error: oklch(65.39% 0.222 25.86);
    --color-error-content: oklch(98.76% 0.009 67.73);
    --radius-selector: 0.25rem;
    --radius-field: 0.375rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  @media (prefers-color-scheme: dark) {
    :root {
      color-scheme: dark;
      --color-base-100: oklch(31.23% 0.026 301.24);
      --color-base-200: oklch(25.39% 0.025 298.72);
      --color-base-300: oklch(23.44% 0.0194 298.63);
      --color-base-content: oklch(84.98% 0.014 295.28);
      --color-primary: oklch(53.93% 0.271 286.75);
      --color-primary-content: oklch(88.22% 0.062 290.17);
      --color-secondary: oklch(49.12% 0.021 303.05);
      --color-secondary-content: oklch(88.83% 0.007 304.23);
      --color-accent: oklch(54.61% 0.215 262.88);
      --color-accent-content: oklch(88.23% 0.057 254.13);
      --color-neutral: oklch(65.75% 0.022 294.95);
      --color-neutral-content: oklch(18.51% 0.017 301.92);
      --color-info: oklch(60.89% 0.111 221.72);
      --color-info-content: oklch(91.67% 0.077 205.04);
      --color-success: oklch(67.35% 0.201 146.84);
      --color-success-content: oklch(91.38% 0.069 168.24);
      --color-warning: oklch(72.59% 0.152 69.05);
      --color-warning-content: oklch(96.07% 0.057 93.2);
      --color-error: oklch(59.54% 0.208 26.28);
      --color-error-content: oklch(93.4% 0.039 54.86);
      --radius-selector: 0.25rem;
      --radius-field: 0.375rem;
      --radius-box: 0.5rem;
      --size-selector: 0.25rem;
      --size-field: 0.25rem;
      --border: 1px;
      --depth: 0;
      --noise: 0;
    }
  }
}
@layer base {
  :root:has(input.theme-controller[value=light]:checked),[data-theme=light] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(97.8% 0.005 297.73);
    --color-base-300: oklch(37.01% 0.0069 297.49);
    --color-base-content: oklch(37.57% 0.022 281.8);
    --color-primary: oklch(57.59% 0.247 287.24);
    --color-primary-content: oklch(96.57% 0.017 289.61);
    --color-secondary: oklch(55.79% 0.022 301.91);
    --color-secondary-content: oklch(97.64% 0.001 286.38);
    --color-accent: oklch(62.31% 0.188 259.81);
    --color-accent-content: oklch(97.05% 0.014 254.6);
    --color-neutral: oklch(37.57% 0.0222 281.8);
    --color-neutral-content: oklch(0.98 0.0013 286.38);
    --color-info: oklch(71.48% 0.126 215.22);
    --color-info-content: oklch(98.41% 0.019 200.87);
    --color-success: oklch(73.11% 0.217 147.04);
    --color-success-content: oklch(98.1% 0.014 174.18);
    --color-warning: oklch(79.87% 0.164 73.09);
    --color-warning-content: oklch(99.34% 0.011 95.16);
    --color-error: oklch(65.39% 0.222 25.86);
    --color-error-content: oklch(98.76% 0.009 67.73);
    --radius-selector: 0.25rem;
    --radius-field: 0.375rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=dark]:checked),[data-theme=dark] {
    color-scheme: dark;
    --color-base-100: oklch(31.23% 0.026 301.24);
    --color-base-200: oklch(25.39% 0.025 298.72);
    --color-base-300: oklch(23.44% 0.0194 298.63);
    --color-base-content: oklch(84.98% 0.014 295.28);
    --color-primary: oklch(53.93% 0.271 286.75);
    --color-primary-content: oklch(88.22% 0.062 290.17);
    --color-secondary: oklch(49.12% 0.021 303.05);
    --color-secondary-content: oklch(88.83% 0.007 304.23);
    --color-accent: oklch(54.61% 0.215 262.88);
    --color-accent-content: oklch(88.23% 0.057 254.13);
    --color-neutral: oklch(65.75% 0.022 294.95);
    --color-neutral-content: oklch(18.51% 0.017 301.92);
    --color-info: oklch(60.89% 0.111 221.72);
    --color-info-content: oklch(91.67% 0.077 205.04);
    --color-success: oklch(67.35% 0.201 146.84);
    --color-success-content: oklch(91.38% 0.069 168.24);
    --color-warning: oklch(72.59% 0.152 69.05);
    --color-warning-content: oklch(96.07% 0.057 93.2);
    --color-error: oklch(59.54% 0.208 26.28);
    --color-error-content: oklch(93.4% 0.039 54.86);
    --radius-selector: 0.25rem;
    --radius-field: 0.375rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root, [data-theme] {
    background-color: var(--root-bg, var(--color-base-100));
    color: var(--color-base-content);
  }
}
@layer base {
  :root {
    --fx-noise: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='a'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.34' numOctaves='4' stitchTiles='stitch'%3E%3C/feTurbulence%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23a)' opacity='0.2'%3E%3C/rect%3E%3C/svg%3E");
  }
  .chat {
    --mask-chat: url("data:image/svg+xml,%3csvg width='13' height='13' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='M0 11.5004C0 13.0004 2 13.0004 2 13.0004H12H13V0.00036329L12.5 0C12.5 0 11.977 2.09572 11.8581 2.50033C11.6075 3.35237 10.9149 4.22374 9 5.50036C6 7.50036 0 10.0004 0 11.5004Z'/%3e%3c/svg%3e");
  }
  .tooltip {
    --mask-tooltip: url("data:image/svg+xml,%3Csvg width='10' height='4' viewBox='0 0 8 4' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0.500009 1C3.5 1 3.00001 4 5.00001 4C7 4 6.5 1 9.5 1C10 1 10 0.499897 10 0H0C-1.99338e-08 0.5 0 1 0.500009 1Z' fill='black'/%3E%3C/svg%3E%0A");
  }
}
@layer base {
  @property --radialprogress {
    syntax: "<percentage>";
    inherits: true;
    initial-value: 0%;
  }
}
@layer base {
  button:not(:disabled), [role="button"]:not(:disabled) {
    cursor: pointer;
  }
}
@layer base {
  :root {
    scrollbar-color: currentColor #0000;
  }
  @supports (color: color-mix(in lab, red, red)) {
    :root {
      scrollbar-color: color-mix(in oklch, currentColor 20%, #0000) #0000;
    }
  }
}
@keyframes indeterminate-progress {
  0% {
    background-position-x: -75%;
  }
  50% {
    background-position-x: 125%;
  }
  100% {
    background-position-x: -75%;
  }
}
@keyframes progress-bar-stripes {
  0% {
    background-position-x: 0.75rem;
  }
}
@keyframes radio {
  0% {
    padding: 5px;
  }
  50% {
    padding: 3px;
  }
}
@keyframes radio-inset {
  0% {
    padding: 1px;
  }
  50% {
    padding: 4px;
  }
}
@keyframes skeleton {
  0% {
    background-position: 150%;
  }
  100% {
    background-position: -50%;
  }
}
@property --tw-rotate-x {
  syntax: "*";
  inherits: false;
}
@property --tw-rotate-y {
  syntax: "*";
  inherits: false;
}
@property --tw-rotate-z {
  syntax: "*";
  inherits: false;
}
@property --tw-skew-x {
  syntax: "*";
  inherits: false;
}
@property --tw-skew-y {
  syntax: "*";
  inherits: false;
}
@property --tw-space-y-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-border-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-font-weight {
  syntax: "*";
  inherits: false;
}
@property --tw-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-inset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-ring-inset {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-offset-width {
  syntax: "<length>";
  inherits: false;
  initial-value: 0px;
}
@property --tw-ring-offset-color {
  syntax: "*";
  inherits: false;
  initial-value: #fff;
}
@property --tw-ring-offset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-outline-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-blur {
  syntax: "*";
  inherits: false;
}
@property --tw-brightness {
  syntax: "*";
  inherits: false;
}
@property --tw-contrast {
  syntax: "*";
  inherits: false;
}
@property --tw-grayscale {
  syntax: "*";
  inherits: false;
}
@property --tw-hue-rotate {
  syntax: "*";
  inherits: false;
}
@property --tw-invert {
  syntax: "*";
  inherits: false;
}
@property --tw-opacity {
  syntax: "*";
  inherits: false;
}
@property --tw-saturate {
  syntax: "*";
  inherits: false;
}
@property --tw-sepia {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-drop-shadow-size {
  syntax: "*";
  inherits: false;
}
@property --tw-duration {
  syntax: "*";
  inherits: false;
}
@layer properties {
  @supports ((-webkit-hyphens: none) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color:rgb(from red r g b)))) {
    *, ::before, ::after, ::backdrop {
      --tw-rotate-x: initial;
      --tw-rotate-y: initial;
      --tw-rotate-z: initial;
      --tw-skew-x: initial;
      --tw-skew-y: initial;
      --tw-space-y-reverse: 0;
      --tw-border-style: solid;
      --tw-font-weight: initial;
      --tw-shadow: 0 0 #0000;
      --tw-shadow-color: initial;
      --tw-shadow-alpha: 100%;
      --tw-inset-shadow: 0 0 #0000;
      --tw-inset-shadow-color: initial;
      --tw-inset-shadow-alpha: 100%;
      --tw-ring-color: initial;
      --tw-ring-shadow: 0 0 #0000;
      --tw-inset-ring-color: initial;
      --tw-inset-ring-shadow: 0 0 #0000;
      --tw-ring-inset: initial;
      --tw-ring-offset-width: 0px;
      --tw-ring-offset-color: #fff;
      --tw-ring-offset-shadow: 0 0 #0000;
      --tw-outline-style: solid;
      --tw-blur: initial;
      --tw-brightness: initial;
      --tw-contrast: initial;
      --tw-grayscale: initial;
      --tw-hue-rotate: initial;
      --tw-invert: initial;
      --tw-opacity: initial;
      --tw-saturate: initial;
      --tw-sepia: initial;
      --tw-drop-shadow: initial;
      --tw-drop-shadow-color: initial;
      --tw-drop-shadow-alpha: 100%;
      --tw-drop-shadow-size: initial;
      --tw-duration: initial;
    }
  }
}
